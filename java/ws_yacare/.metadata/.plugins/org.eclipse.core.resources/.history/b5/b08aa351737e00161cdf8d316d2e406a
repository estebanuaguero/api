package org.yacare.api.controller;

import io.swagger.annotations.ApiParam;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.yacare.Swagger2SpringBoot;
import org.yacare.api.interfaces.StudentsApi;
import org.yacare.bo.StudentBo;
import org.yacare.model.Student;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringCodegen", date = "2016-09-08T13:04:56.524Z")
@Controller
public class StudentsApiController implements StudentsApi {

	private final String p1 = "Desplazamiento de la lista de resultados devueltos por esta cantidad. El valor predeterminado es cero.";
	private final String p2 = "Número de objetos que se recuperará. El valor predeterminado es 5, el máximo es 100.";
	private final String p3 = "Identificador de estudiante";

	@CrossOrigin(origins = "http://localhost:9000")
	public ResponseEntity<List<Student>> studentsGet(
			@ApiParam(value = p1) @RequestParam(value = "offset", required = false) Integer offset,
			@ApiParam(value = p2) @RequestParam(value = "limit", required = false) Integer limit) {

		return getStudent(offset, limit);
	}

	@CrossOrigin(origins = "http://localhost:9000")
	public ResponseEntity<Student> studentsIdGet(
			@ApiParam(value = p3, required = true) @PathVariable("id") String id) {

		return getStudentByPersonId(id);
	}

	private ResponseEntity<Student> getStudentByPersonId(String id) {
		
		Error error = new Error();

		try {
			
			if(id == null || id.trim().length() == 0){
				return new ResponseEntity<Student>(HttpStatus.UNPROCESSABLE_ENTITY);
			}
			
			StudentBo studentBo = new StudentBo();
			studentBo.setDataSourceWrapper(Swagger2SpringBoot
					.getDataSourceWrapper());

			Student student = studentBo.getStudentByPersonId(id);

			if (student == null) {				
				return new ResponseEntity<Student>(HttpStatus.NOT_FOUND);
			} else if (student.getId() == null
					|| student.getId().trim().length() == 0) {
				return new ResponseEntity<Student>(HttpStatus.NOT_FOUND);
			} else if (student.getId() == null
					|| student.getId().trim().equals(id) == false) {
				return new ResponseEntity<Student>(HttpStatus.INTERNAL_SERVER_ERROR);
			}

			return new ResponseEntity<Student>(student, HttpStatus.OK);

		} catch (Exception e) {
			return new ResponseEntity<Student>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	private ResponseEntity<List<Student>> getStudent(Integer offset,
			Integer limit) {

		StudentBo studentBo = new StudentBo();
		studentBo.setDataSourceWrapper(Swagger2SpringBoot
				.getDataSourceWrapper());

		List<Student> students = studentBo.getStudent(offset, limit);

		return new ResponseEntity<List<Student>>(students, HttpStatus.OK);
	}

}
