package org.yacare.api.interfaces;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.yacare.model.EducationLevel;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringCodegen", date = "2016-09-12T14:42:20.090Z")
@Api(value = "education_levels", description = "the blood_groups API")
public interface EducationLevelsApi {

	public static String tagName = "EducationLevel";

	public static String url = "/education_levels";
	public static String urlId = url + "/{id}";
	public static String produces = "application/json";

	public static String msg200_1 = "Grupo sanguineo por id";
	public static String msg200_2 = "Unexpected error";
	public static String msg200_3 = "Un listado de todos los grupos sanguineos";
	public static String msg404 = "Recurso no encontrado";
	public static String msg422 = "Id inválido";
	public static String msg500 = "Error interno del servidor";

	public static String msg1 = "Grupo sanguineo por id";
	public static String msg2 = "Grupo Sanguineo de una Persona. Ver https://es.wikipedia.org/wiki/Grupo_sangu%C3%ADneo";
	public static String msg3 = "Identificador del grupo sanguineo";
	public static String msg4 = "id";

	public static String msg5 = "Grupo sanguineo de una persona";
	public static String msg6 = "Desplazamiento de la lista de resultados devueltos por esta cantidad. El valor predeterminado es cero.";
	public static String msg7 = "Número de objetos que se recuperará. El valor predeterminado es 5, el máximo es 100.";
	public static String msg8 = "offset";
	public static String msg9 = "limit";

	@ApiOperation(value = msg1, notes = msg2, response = EducationLevel.class, tags = { tagName })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = msg200_1, response = EducationLevel.class),
			@ApiResponse(code = 404, message = msg404, response = EducationLevel.class),
			@ApiResponse(code = 422, message = msg422, response = EducationLevel.class),
			@ApiResponse(code = 500, message = msg500, response = EducationLevel.class),
			@ApiResponse(code = 200, message = msg200_2, response = EducationLevel.class) })
	@RequestMapping(value = urlId, produces = { produces }, method = RequestMethod.GET)
	ResponseEntity<EducationLevel> bloodGroupIdGet(
			@ApiParam(value = msg3, required = true) @PathVariable(msg4) String id

	);

	@ApiOperation(value = msg5, notes = msg2, response = EducationLevel.class, responseContainer = "List", tags = { tagName })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = msg200_3, response = EducationLevel.class),
			@ApiResponse(code = 404, message = msg404, response = EducationLevel.class),
			@ApiResponse(code = 500, message = msg422, response = EducationLevel.class),
			@ApiResponse(code = 200, message = msg500, response = EducationLevel.class) })
	@RequestMapping(value = url, produces = { produces }, method = RequestMethod.GET)
	ResponseEntity<List<EducationLevel>> bloodGroupGet(
			@ApiParam(value = msg6) @RequestParam(value = msg8, required = false) Integer offset

			,
			@ApiParam(value = msg7) @RequestParam(value = msg9, required = false) Integer limit

	);

}
