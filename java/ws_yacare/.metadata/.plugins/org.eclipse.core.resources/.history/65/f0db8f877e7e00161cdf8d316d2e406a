package org.yacare.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.yacare.model.BloodFactor;
import org.yacare.model.BloodGroup;

@Api(value = "blood_groups")
public interface BloodGroupsApi {

	public static String tagName = "BloodGroup";
	public static String notes = "Grupo Sanguineo de una Persona. Ver https://es.wikipedia.org/wiki/Grupo_sangu%C3%ADneo";
	public static String produces = "application/json";

	public static final String msg404 = "Grupo sanguineo no encontrado";
	public static final String msg422 = "Id de grupo sanguineo inválido";
	public static final String msg500 = "Error interno del servidor";

	// ---------------------------------------------------------------------------------------

	public static String endPointUrl_1 = "/blood_factors";
	public static String endPointTitle_1 = "Factores sanguineos paginados";
	public static String endPointReturn_1 = "Retorna un listado de factores sanguineos";

	public static String endPointArg1Title_1 = "Desplazamiento de la lista de resultados devueltos por esta cantidad. El valor predeterminado es cero.";
	public static String endPointArg1_1 = "offset";

	public static String endPointArg2Title_1 = "Número de factores sanguineos que se recuperará. El valor predeterminado es 5, el máximo es 100.";
	public static String endPointArg2_1 = "limit";

	@ApiOperation(value = endPointTitle_1, notes = notes, response = BloodFactor.class, responseContainer = "List", tags = { tagName })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = endPointReturn_1, response = BloodFactor.class),
			@ApiResponse(code = 404, message = msg404),
			@ApiResponse(code = 500, message = msg500) })
	@RequestMapping(value = endPointUrl_1, produces = { produces }, method = RequestMethod.GET)
	ResponseEntity<List<BloodFactor>> getList(
			@ApiParam(value = endPointArg1Title_1) @RequestParam(value = endPointArg1_1, required = false) Integer offset,
			@ApiParam(value = endPointArg2Title_1) @RequestParam(value = endPointArg2_1, required = false) Integer limit

	);

	public static String url = "/blood_groups";
	public static String urlId = url + "/{id}";

	public static String msg200_1 = "Grupo sanguineo por id";
	public static String msg200_2 = "Un listado de todos los grupos sanguineos";

	public static String msg1 = "Grupo sanguineo por id";
	public static String msg2 = "Grupo Sanguineo de una Persona. Ver https://es.wikipedia.org/wiki/Grupo_sangu%C3%ADneo";
	public static String msg3 = "Identificador del grupo sanguineo";
	public static String msg4 = "id";

	public static String msg5 = "Grupo sanguineo de una persona";
	public static String msg6 = "Desplazamiento de la lista de resultados devueltos por esta cantidad. El valor predeterminado es cero.";
	public static String msg7 = "Número de objetos que se recuperará. El valor predeterminado es 5, el máximo es 100.";
	public static String msg8 = "offset";
	public static String msg9 = "limit";

	@ApiOperation(value = msg1, notes = msg2, response = BloodGroup.class, tags = { tagName })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = msg200_1, response = BloodGroup.class),
			@ApiResponse(code = 404, message = msg404),
			@ApiResponse(code = 422, message = msg422),
			@ApiResponse(code = 500, message = msg500) })
	@RequestMapping(value = urlId, produces = { produces }, method = RequestMethod.GET)
	ResponseEntity<BloodGroup> bloodGroupIdGet(
			@ApiParam(value = msg3, required = true) @PathVariable(msg4) String id

	);

	@ApiOperation(value = msg5, notes = msg2, response = BloodGroup.class, responseContainer = "List", tags = { tagName })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = msg200_2, response = BloodGroup.class),
			@ApiResponse(code = 404, message = msg404),
			@ApiResponse(code = 500, message = msg500) })
	@RequestMapping(value = url, produces = { produces }, method = RequestMethod.GET)
	ResponseEntity<List<BloodGroup>> bloodGroupGet(
			@ApiParam(value = msg6) @RequestParam(value = msg8, required = false) Integer offset,
			@ApiParam(value = msg7) @RequestParam(value = msg9, required = false) Integer limit

	);

}
